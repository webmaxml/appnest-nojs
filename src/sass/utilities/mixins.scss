@use 'modules/types' as *;
@use 'modules/list';
@use 'modules/number';
@use 'functions' as *;

// ----------------------------------------- output -----------------------------------------

@mixin _prop($prop, $value) { 
  $prop: validate($prop, 'string');
  #{$prop}: $value; 
}
@mixin _breakpoints($prop, $bps) {
  $prop: validate($prop, 'string');
  $bps: validate($bps, 'map');

  @each $width, $value in $bps {
    @if unit($width) != 'px' { @error "width must be px number, '#{inspect($width)}' - provided"; }

    @media screen and (min-width: $width) {
      @include _prop($prop, $value);
    }
  }
}

// ----------------------------------------- screen-height-section -----------------------------------------

@mixin screen-height-section($bps) {
  $bps: validate($bps, 'map');

  @each $width, $heights in $bps {
    $width: validate($width, 'number');
    $heights: validate($heights, 'list');

    $width: number.to-px($width);
    $min-height: number.to-px(nth($heights, 1));
    $max-height: number.to-px(nth($heights, 2));

    @if $min-height == $max-height {
      @media only screen and (min-width: $width) { height: auto; }
    } @else {
      @media only screen and (min-width: $width) { min-height: $min-height; }
      @media only screen and (min-width: $width) and (max-height: $max-height) { height: 100vh; }
    }
  }
}

// ----------------------------------------- prop -----------------------------------------

@function _is-fluid($value) { @return is($value, 'list') and list.first($value) == 'fluid'; } 
@function _is-breakpoints($value) { @return is($value, 'map'); }
@function _is-value-with-breakpoints($value) {  @return is($value, 'list') and is(list.last($value), 'map') and list.first($value) != 'fluid'; }

@function _set-fluid-values($value, $key, $bps) {
  @if list.is-last($bps, $value) { @return number.to-px($value); }

  $next-key: list.next-key($bps, $key);
  $next-value: list.next-value($bps, $value);
  @return fluid($key, $next-key, $value, $next-value);
}

@mixin p($prop, $value) {
  $prop: validate($prop, 'string');

  $val: $value;
  $bps: null;

  @if _is-fluid($value) { 
    $val: number.to-px(list.first(list.last($value)));
    $bps: list.map-keys(list.last($value), get-function('to-px', $module: 'number'));
    $bps: list.map($bps, get-function('_set-fluid-values'));
  }

  @if _is-breakpoints($value) {
    $val: null;
    $bps: list.map-keys($value, get-function('to-px', $module: 'number'));
  }

  @if _is-value-with-breakpoints($value) { 
    $val: list.remove($value, list.last($value));
    $bps: list.map-keys(list.last($value), get-function('to-px', $module: 'number')); 
  }

  @if $val { @include _prop($prop, $val) };
  @if $bps { @include _breakpoints($prop, $bps); }
}