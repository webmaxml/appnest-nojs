@use 'modules/types' as *;
@use 'modules/list';
@use 'modules/number';
@use 'functions' as *;

// ----------------------------------------- output -----------------------------------------

@mixin _prop($prop, $value) { 
  $prop: validate($prop, 'string');
  #{$prop}: $value; 
}
@mixin _breakpoints($prop, $bps) {
  $prop: validate($prop, 'string');
  $bps: validate($bps, 'map');

  @each $width, $value in $bps {
    @if unit($width) != 'px' { @error "width must be px number, '#{inspect($width)}' - provided"; }

    @media screen and (min-width: $width) {
      @include _prop($prop, $value);
    }
  }
}

// ----------------------------------------- prop -----------------------------------------

@function _is-fluid($value) { @return is($value, 'list') and list.first($value) == 'fluid'; } 
@function _is-breakpoints($value) { @return is($value, 'map'); }
@function _is-value-with-breakpoints($value) {  @return is($value, 'list') and is(list.last($value), 'map') and list.first($value) != 'fluid'; }

@function _set-fluid-values($value, $key, $bps) {
  @if list.is-last($bps, $value) { @return number.to-px($value); }

  $next-key: list.next-key($bps, $key);
  $next-value: list.next-value($bps, $value);
  @return fluid($key, $next-key, $value, $next-value);
}

@mixin p($prop, $value) {
  $prop: validate($prop, 'string');

  $val: $value;
  $bps: null;

  @if _is-fluid($value) { 
    $val: number.to-px(list.first(list.last($value)));
    $bps: list.map-keys(list.last($value), get-function('to-px', $module: 'number'));
    $bps: list.map($bps, get-function('_set-fluid-values'));
  }

  @if _is-breakpoints($value) {
    $val: null;
    $bps: list.map-keys($value, get-function('to-px', $module: 'number'));
  }

  @if _is-value-with-breakpoints($value) { 
    $val: list.remove($value, list.last($value));
    $bps: list.map-keys(list.last($value), get-function('to-px', $module: 'number')); 
  }

  @if $val { @include _prop($prop, $val) };
  @if $bps { @include _breakpoints($prop, $bps); }
}

// ----------------------------------------- screen-height-section -----------------------------------------

@mixin screen-height-section($bps) {
  $bps: validate($bps, 'map');

  @each $width, $heights in $bps {
    $width: validate($width, 'number');
    $heights: validate($heights, 'list');

    $width: number.to-px($width);
    $min-height: number.to-px(nth($heights, 1));
    $max-height: number.to-px(nth($heights, 2));

    @if $min-height == $max-height {
      @media only screen and (min-width: $width) { height: auto; }
    } @else {
      @media only screen and (min-width: $width) { min-height: $min-height; }
      @media only screen and (min-width: $width) and (max-height: $max-height) { height: 100vh; }
    }
  }
}

// ----------------------------------------- text-fade -----------------------------------------

@mixin text-fade($height, $color) {
  position: relative;

  &::after {
    position: absolute;
    left: 0;
    bottom: 0;
    z-index: 1;

    content: '';
    width: 100%;
    height: $height;

    background: linear-gradient(to bottom, transparent, $color);
  }
}

// ----------------------------------------- BEM -----------------------------------------

$block: null !default;

@mixin set-block($selector) { $block: $selector !global; }

@function _bem-selector($block, $elem: null, $mod: null) {
  $selector: $block;
  @if $elem { $selector: '#{$selector}__#{$elem}'; }
  @if $mod { $selector: '#{$selector}--#{$mod}'; }
  @return $selector;
}

@mixin b { 
  #{$block} { @content; } 
}

@mixin e($elem, $mod: null) {
  @at-root #{_bem-selector($block, $elem, $mod)} { @content; }
}

@mixin e-nested($elem, $mod: null) {
  #{_bem-selector($block, $elem, $mod)} { @content; } 
}

@mixin e-combined($elems...) {
  $selector: '';
  @each $elem in $elems {
    $selector: $selector + _bem-selector($block, $elem);
  }

  @at-root #{$selector} { @content; }
}

// ----------------------------------------- overlay -----------------------------------------

@mixin overlay($color-var, $opacity) {
  position: relative;
  z-index: 0;

  &::before {
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;

    display: block; 

    content: '';
    width: 100%;
    height: 100%;

    background: set-opacity($color-var, $opacity);
  }
}

// ----------------------------------------- area -----------------------------------------

@mixin area($area, $justify: start, $align: start) {
  grid-area: $area;
  @include p(justify-self, $justify);
  @include p(align-self, $align);
}

// ----------------------------------------- flex -----------------------------------------

@mixin flex($wrap, $justify: flex-start, $align: flex-start) {
  display: flex;
  flex-flow: row $wrap;
  justify-content: $justify;
  align-items: $align;
}

// ----------------------------------------- border-style -----------------------------------------

@mixin border-style($style, $color, $radius: null) {
  border-style: $style;
  border-color: $color;
  border-radius: $radius;
}

// ----------------------------------------- text -----------------------------------------

@mixin text($ff, $fw, $fz, $lh, $c, $tt: null) {
  font-family: $ff;
  font-weight: $fw;
  font-size: $fz;
  line-height: $lh;
  color: $c;
  text-transform: $tt;
}

// ----------------------------------------- hover-lines -----------------------------------------

@mixin hover-center-line($height, $bottom, $color, $transition) {
  position: relative;

  &::after {
    position: absolute;
    left: 50%;
    bottom: $bottom;

    display: block;

    content: '';
    width: 0%;
    height: 0%;

    background: $color;
    transition: $transition;
  }

  &:hover::after {
    left: 0;

    width: 100%;
    height: $height;
  }
}