@use '../modules/assert';
@use '../modules/string';

// is-string

@function string1() {
  @return assert.equal(string.is-string(()), false, 'empty list is not a string');
}

@function string2() {
  @return assert.equal(string.is-string((1, 'a')), false, 'not empty list is not a string');
}

@function string3() {
  @return assert.equal(string.is-string(1), false, 'number is not a string');
}

@function string4() {
  @return assert.equal(string.is-string('some'), true, 'string is a string');
}

@function string5() {
  @return assert.equal(string.is-string(#000), false, 'color is not a string');
}

@function string6() {
  @return assert.equal(string.is-string(true), false, 'bool is not a string');
}

@function string7() {
  @return assert.equal(string.is-string(null), false, 'null is not a string');
}

@function string8() {
  @return assert.equal(string.is-string((a: 23)), false, 'map is not a string');
}

// normalize-slash

@function string9() {
  $test: 'some';
  $expected: 'some';

  @return assert.equal(string.normalize-slash($test), $expected, 'normalize string without /');
}

@function string10() {
  $test: 'some/1px';
  $expected: 'some' '/' '1px';

  @return assert.equal(string.normalize-slash($test), $expected, 'normalize string with /');
}

@function string11() {
  $test: 'some/1px/1/yes';
  $expected: 'some' '/' '1px' '/' '1' '/' 'yes';

  @return assert.equal(string.normalize-slash($test), $expected, 'normalize big string with /');
}

@function string11a() {
  $test: 122px --some/1px 1fr;
  $expected: 122px '--some' '/' '1px' 1fr;

  @return assert.equal(string.normalize-slash($test), $expected, 'normalize list with /');
}

// to-string

@function string12() {
  $value: 100px;
  $expected: '100px';

  @return assert.equal(string.to-string($value), $expected, 'number to string');
}

@function string13() {
  $value: true;
  $expected: 'true';

  @return assert.equal(string.to-string($value), $expected, 'bool to string');
}

@function string14() {
  $value: 1 2 3 4;
  $expected: '1 2 3 4';

  @return assert.equal(string.to-string($value), $expected, 'list to string');
}


@function string15() {
  $value: (some1: 1, some2: 2);
  $expected: '(some1: 1, some2: 2)';

  @return assert.equal(string.to-string($value), $expected, 'map to string');
}

@function string16() {
  $value: (some1: 1, some2: 1 2 3 4, some3: (some4: 4, some5: 5));
  $expected: '(some1: 1, some2: 1 2 3 4, some3: (some4: 4, some5: 5))';

  @return assert.equal(string.to-string($value), $expected, 'complex map to string');
}