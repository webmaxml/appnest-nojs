@use 'sass:meta';
@use 'sass:string';
@use 'sass:list';
@use 'sass:map';
@use 'obj';
@use 'ports';

@function get-module-name($str) {
  @if type-of($str) != 'string' { @error 'get-module-name() expects string, #{type-of($str)} - provided'; }

  @return if(
    string.index($str, '.'),
    string.slice($str, 1, string.index($str, '.') - 1),
    null
  );
}

@function get-function-name($str) {
  @if type-of($str) != 'string' { @error 'get-function-name() expects string, #{type-of($str)} - provided'; }

  $start: if(string.index($str, '.'), string.index($str, '.') + 1, 1);
  $end: if(string.index($str, ':'), string.index($str, ':') - 1, -1);
  
  @return string.slice($str, $start, $end);
}

@function get-port-name($str) {
  @if type-of($str) != 'string' { @error 'get-port-name() expects string, #{type-of($str)} - provided'; }

  @return if(
    string.index($str, ':'),
    string.slice($str, string.index($str, ':') + 1),
    'default'
  );
}

@function arglist-to-list($arglist) {
  @if type-of($arglist) != 'arglist' { @error 'process-argslist() expects argslist, #{type-of($arglist)} - provided'; }

  $list: ();
  @each $item in $arglist {
    $list: append($list, $item);
  }

  @return $list;
}

@function _is-fn-list($value) {
  @if type-of($value) == 'list' and length($value) > 0 {
    @each $item in $value {
      @if obj.instance-of($item) != 'Fn' { @return false; }
    }

    @return true;
  } @else {
    @return false;
  }
}

@function invoke-fn-list($list) {
  @if not _is-fn-list($list) { @error "invoke-fn-list() expects list of Fn, #{type-of($list)} - provided"; }

  $result: null;
  @each $fn in $list {
    $result: obj.call($fn, 'invoke');
  }

  @return $result;
}

@function _process-args($arg) {
  @if obj.instance-of($arg) == 'Placeholder' { @return obj.call($arg, 'replace'); } 
  @if obj.instance-of($arg) == 'Fn' { @return obj.call($arg, 'invoke'); } 
  @if _is-fn-list($arg) { @return invoke-fn-list($arg); }

  @if type-of($arg) == 'list' {
    $list: ();
    @each $item in $arg {
      $list: append($list, _process-args($item));
    }

    @return $list;
  }

  @if type-of($arg) == 'map' {
    $map: ();
    @each $key, $value in $arg {
      $map: map.set($map, $key, _process-args($value));
    }

    @return $map;
  }

  @return $arg;
}


@function _invoke($this) {
  $fn: obj.get($this, 'fn');
  $port: obj.get($this, 'port');
  $args: _process-args(obj.get($this, 'args'));

  $result: call($fn, $args...);
  $ports: ports.set($port, $result);

  @return $result;
}


@function create($fn, $port, $args) {
  @if type-of($fn) != 'function' { @error "Fn expects function, #{type-of($fn)} - provided"; }
  @if type-of($port) != 'string' { @error "Fn expects port as string, #{type-of($port)} - provided"; }
  @if type-of($args) != 'list' { @error "Fn expects args as list, #{type-of($args)} - provided"; }

  @return obj.create-class('Fn', (
    'fn': $fn,
    'port': $port,
    'args': $args,
    'invoke': get-function('_invoke'),
  ));
}

