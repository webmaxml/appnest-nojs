@use 'sass:meta';
@use 'sass:string';
@use 'sass:list';
@use 'sass:map';
@use 'obj';

@function get-module-name($str) {
  @if type-of($str) != 'string' { @error 'get-module-name() expects string, #{type-of($str)} - provided'; }

  @return if(
    string.index($str, '.'),
    string.slice($str, 1, string.index($str, '.') - 1),
    null
  );
}

@function get-function-name($str) {
  @if type-of($str) != 'string' { @error 'get-function-name() expects string, #{type-of($str)} - provided'; }

  $start: if(string.index($str, '.'), string.index($str, '.') + 1, 1);
  $end: if(string.index($str, ':'), string.index($str, ':') - 1, -1);
  
  @return string.slice($str, $start, $end);
}

@function get-port-name($str) {
  @if type-of($str) != 'string' { @error 'get-port-name() expects string, #{type-of($str)} - provided'; }

  @return if(
    string.index($str, ':'),
    string.slice($str, string.index($str, ':') + 1),
    'default'
  );
}

@function arglist-to-list($arglist) {
  @if type-of($arglist) != 'arglist' { @error 'process-argslist() expects argslist, #{type-of($arglist)} - provided'; }

  $list: ();
  @each $item in $arglist {
    $list: append($list, $item);
  }

  @return $list;
}

@function _replace-placeholders($args, $return) {
  @if type-of($args) != 'list' { @error 'replace-placeholders() expects args as list, #{type-of($args)} - provided'; }
  @if obj.instance-of($return) != 'Return' { @error 'replace-placeholders() expects instance of Return, #{type-of($return)} - provided'; }

  $replaced: ();
  @each $arg in $args {
    $replaced: append($replaced, 
      if(
        obj.is-obj($arg) and obj.instance-of($arg) == 'Placeholder',
        obj.call($arg, 'get-value', $return),
        $arg
      )
    );
  }

  @return $replaced;
}

@function _invoke($this, $return) {
  @if obj.instance-of($return) != 'Return' { @error 'invoke() expects instance of Return, #{type-of($return)} - provided'; }

  $result: call(
    obj.get($this, 'fn'),
    _replace-placeholders(obj.get($this, 'args'), $return)...
  );

  @return obj.call($return, 'set', obj.get($this, 'port'), $result);
}


@function create($fn, $port, $args) {
  @if type-of($fn) != 'function' { @error "Fn expects function, #{type-of($fn)} - provided"; }
  @if type-of($port) != 'string' { @error "Fn expects port as string, #{type-of($port)} - provided"; }
  @if type-of($args) != 'list' { @error "Fn expects args as list, #{type-of($args)} - provided"; }

  @return obj.create-class('Fn', (
    'fn': $fn,
    'port': $port,
    'args': $args,
    'invoke': get-function('_invoke'),
  ));
}

