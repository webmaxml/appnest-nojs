@use 'sass:meta';
@use 'sass:string';
@use 'sass:list';
@use 'sass:map';
@use 'obj';

@function get-module-name($str) {
  @if type-of($str) != 'string' { @error 'get-module-name() expects string, #{type-of($str)} - provided'; }

  @return if(
    string.index($str, '.'),
    string.slice($str, 1, string.index($str, '.') - 1),
    null
  );
}

@function get-function-name($str) {
  @if type-of($str) != 'string' { @error 'get-function-name() expects string, #{type-of($str)} - provided'; }

  $start: if(string.index($str, '.'), string.index($str, '.') + 1, 1);
  $end: if(string.index($str, ':'), string.index($str, ':') - 1, -1);
  
  @return string.slice($str, $start, $end);
}

@function get-port-name($str) {
  @if type-of($str) != 'string' { @error 'get-port-name() expects string, #{type-of($str)} - provided'; }

  @return if(
    string.index($str, ':'),
    string.slice($str, string.index($str, ':') + 1),
    'default'
  );
}

@function arglist-to-list($arglist) {
  @if type-of($arglist) != 'arglist' { @error 'process-argslist() expects argslist, #{type-of($arglist)} - provided'; }

  $list: ();
  @each $item in $arglist {
    $list: append($list, $item);
  }

  @return $list;
}

@function _invoke($this) {
  @return call(
    obj.call($this, 'get-fn'),
    obj.call($this, 'get-args')...
  );
}

@function _get-fn($this) { @return obj.get($this, 'fn'); }
@function _get-port($this) { @return obj.get($this, 'port'); }
@function _get-args($this) { @return obj.get($this, 'args'); }

@function create($fn, $port, $args) {
  @if type-of($fn) != 'function' { @error "Fn expects function, #{type-of($fn)} - provided"; }
  @if type-of($port) != 'string' { @error "Fn expects port as string, #{type-of($port)} - provided"; }
  @if type-of($args) != 'list' { @error "Fn expects args as list, #{type-of($args)} - provided"; }

  @return obj.create-class('Fn', (
    'fn': $fn,
    'port': $port,
    'args': $args,
    'get-fn': get-function('_get-fn'),
    'get-port': get-function('_get-port'),
    'get-args': get-function('_get-args'),
    'invoke': get-function('_invoke'),
  ));
}

