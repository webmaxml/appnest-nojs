@use 'sass:meta';
@use 'sass:string';
@use 'list';

@function unquote($string) { @return string.unquote($string); }
@function quote($string) { @return string.quote($string); }
@function index($string, $substring) { @return string.index($string, $substring); }
@function insert($string, $insert, $index) { @return string.insert($string, $insert, $index); }
@function length($string) { @return string.length($string); }
@function slice($string, $start-at, $end-at: -1) { @return string.slice($string, $start-at, $end-at); }
@function to-upper-case($string) { @return string.to-upper-case($string); }
@function to-lower-case($string) { @return string.to-lower-case($string); }
@function unique-id() { @return string.unique-id(); }

@function is-string($value) {
  @return meta.type-of($value) == string;
}

// turns strings with '/' into list - (sub-string1, /, sub-string2)
@function normalize-slash($value) {
  @if is-string($value) and length($value) > 1 and index($value, '/') {
    $result: ();

    $slash-i: index($value, '/');
    $sub1: slice($value, 1, $slash-i - 1);
    $sub2: slice($value, $slash-i + 1);

    @if index($sub2, '/') {
      $sub2: normalize-slash($sub2);
    }

    $result: list.append($result, $sub1);
    $result: list.append($result, unquote('/'));
    $result: list.join($result, $sub2);

    @return $result;
  } @else if list.is-list($value) {
    $result: ();
    @each $elem in $value {
      $elem: normalize-slash($elem);
      @if list.is-list($elem) {
        $result: list.join($result, $elem);
      } @else {
        $result: list.append($result, $elem);
      }
    }

    @return $result;
  } @else {
    @return $value;
  }
}

@function process-var($value) {
  $value: normalize-slash($value);
  
  @if is-list($value) {
    $result: ();
    @each $elem in $value {
      $result: list.append($result, process-var($elem));
    }
    
    @return $result;
  } @else if is-string($value) and string.index($value, "--") == 1 {
    @return var($value);
  } @else {
    @return $value;
  }
}

// meta.inspect!!!

@function to-string($value) {
  $output: '';
  @if list.is-map($value) {
    $output: '(';
    @each $key, $val in $value {
      $end: if(not list.is-last-elem($value, $key), ', ', '');
      $key: to-string($key);
      $val: to-string($val);

      $output: $output + $key + ': ' + $val + $end;
    }

    @return $output + ')';
  } @else {
    @return $output + $value;
  }
}