@use 'sass:meta';
@use 'sass:string';
@use 'sass:list';
@use 'sass:map';

@function f($name, $args...) { @return list.join(get-function($name), $args); }


@function throw($message) {
  @error $message;
}

@function is-function($value) {
  @return type-of($value) == 'function';
}

@function is-function-list($value) {
  @return type-of($value) == 'list' and type-of(list.nth($value, 1)) == 'function';
}

@function invoke($item) {
  @return if(
    is-function-list($item) or is-function($item), 
    call($item...), 
    throw('invoke() expects function-list or function, #{type-of($item)} - provided')
  );
}

@function pipe($args...) {
  $result: null;
  @each $item in $args {
    @if $item {
      @if type-of($item) == 'list' {
        $placeholder: list.index($item, '<>');
        @if $placeholder {
          $item: list.set-nth($item, $placeholder, $result);
        }
      }

      $result: invoke($item);
    }
  }

  @return $result;
}

@function return-or-invoke($value) {
  @return if(is-function-list($value) or is-function($value), invoke($value), $value);
}


@function if-else($cond, $then, $else) {
  @return if(return-or-invoke($cond), return-or-invoke($then), return-or-invoke($else));
}


@function debug($value) {
  @debug $value;
  @return $value;
}


@function join($a, $b) {
  @return list.join($a, $b);
}

@function exists($value) {
  @return $value != null;
}
@function to-list($str) {
  @return list.append((), $str);
}

@function has($str, $sep) {
  @return string.index($str, $sep);
}

@function decrement($num) {
  @return $num - 1;
}

@function increment($num) {
  @return $num + 1;
}

// @function first-half($str, $sep) {
//   @return string.slice($str, 1, string.index($str, $sep) - 1);
// }

// @function second-half($str, $sep) {
//   @return string.slice($str, string.index($str, $sep) + 1);
// }


// pipe() returns funciton-list instead of calling it
// функция с() которая вызывает функцию, function-list
// проверять в с() аргументы, если они являются function-list - исполнять их сперва
// если в с() попадает функция if() - выполнить ее и выполнить вернувшийся function-list


@function split-with-sep($str, $sep) {
  @return if(
    has($str, $sep),
    join(
      pipe(
        f('str-index', $str, $sep), 
        if($sep == '', null, f('decrement', '<>')),
        f('str-slice', $str, 1, '<>'),
        f('to-list', '<>'),
      ),
      pipe(
        f('str-index', $str, $sep),
        f('increment', '<>'),
        f('str-slice', $str, '<>'),
        f('split-with-sep', '<>', $sep)
      )
    ),
    to-list($str)
  );
}

@function split($str, $sep: null) {
  // @return if(
  //   exists($sep),
  //   split-with-sep($str, $sep),
  //   to-list($str)
  // );

  @return if-else(
    f('exists', $sep), 
    f('split-with-sep', $str, $sep), 
    f('to-list', $str)
  );
}

@function add($a, $b) {
  @return $a + $b;
}


@debug split('fuck you', ' ');


@function check-type($value, $expected, $message) {
  @if type-of($expected) != 'string' { @error 'type must be string in check-type(), #{type-of($expected)} - provided'; }
  @if type-of($message) != 'string' { @error 'message must be string in check-type(), #{type-of($message)} - provided'; }

  // $expected: pipe(
  //   get-function('index', $module: 'string') $expected '|',
  //   get-function('if') '<>' 
  // );

  $actual: type-of($value);
  $separator: string.index($expected, '|');
  $type-placeholder: string.index($message, '%t');

  @if $type-placeholder {
    $message: string.slice($message, 1, $type-placeholder - 1) + 
              $actual + 
              string.slice($message, $type-placeholder + 2);
  }

  @if $separator {
    $expected1: string.slice($expected, 1, $separator - 1);
    $expected2: string.slice($expected, $separator + 1);

    @if $actual != $expected1 and $actual != $expected2 { @error $message; }
  } @else {
    @if $actual != $expected { @error $message; }
  }

  @return $value;
}


@function switch($cond, $cases) {
  @if type-of($cases) != 'map' {
    @error 'cases must be map in switch(), #{type-of($cases)} - provided';
  }

  $default: map.get($cases, 'default');
  @if not $default {
    @error 'cases must have default prop in switch()';
  }

  @each $case, $value in $cases {
    @if $cond == $case {
      @return if(type-of($value) == 'function', call($value), $value);
    }
  }

  @return if(type-of($default) == 'function', call($default), $default);
}



