@use 'sass:meta';
@use 'sass:string';
@use 'sass:list';
@use 'sass:map';

@function f($name, $args...) { @return list.join(get-function($name), $args); }


@function throw($message) {
  @error $message;
}

@function for-each($list, $cb) {
  $result: null;
  @each $item in $list {
    $result: call($cb, $item, list.index($list, $item), $list);
  }

  @return $result;
}

@function args-to-list($args) {
  $result: ();
  @each $arg in $args {
    $result: list.append($result, $arg);
  }

  @return $result;
}

@function is-function($value) {
  @return type-of($value) == 'function';
}

@function is-function-list($value) {
  @return type-of($value) == 'list' and type-of(list.nth($value, 1)) == 'function';
}

@function is-list-of-function-lists($value) {
  @return type-of($value) == 'list' and is-function-list(list.nth($value, 1));
}

// @function replace-placeholder($list, $value) {
//   $processed: ();
//   @each $item in $list {
//     @if type-of($item) == list {
//       $item: replace-placeholder($item, $value);
//     }

//     $processed: list.append($processed, if($item == '<>', $value, $item)); 
//   }

//   @return $processed;
// }

@function replace-placeholder($fn-list, $value) {
  $processed: ();
  @each $item in $fn-list {
    $processed: list.append($processed, if($item == '<>', $value, $item)); 
  }

  @return $processed;
}




@function call-or-return($value, $cb) {
  @return if(
    is-function-list($value) or is-list-of-function-lists($value),
    call($cb, $value),
    $value
  );
}

@function process-if-args($fn-list, $cb) {
  @return list.set-nth(
    $fn-list, 
    2, 
    call-or-return(list.nth($fn-list, 2), $cb)
  );
}

@function process-args($fn-list, $cb) {
  $processed: ();
  @each $arg in $fn-list {
    $processed: list.append($processed, call-or-return($arg, $cb));
  }

  @return $processed;
}


$fn-state: null;
@function set-fn-state($value) {
  $fn-state: $value !global;
  @return $fn-state;
}

@function get-fn-state() {
  @return $fn-state;
}

@function reset-fn-state() {
  $fn-state: null !global;
  @return true;
}



@function invoke-fn-list($fn-list, $cb) {
  $fn-list: replace-placeholder($fn-list, get-fn-state());

  $result: if(
    list.nth($fn-list, 1) == get-function('if'),
    call-or-return(call(process-if-args($fn-list, $cb)...), $cb),
    call-or-return(call(process-args($fn-list, $cb)...), $cb)
  );

  @return set-fn-state($result);
}

@function invoke-list-of-fn-lists($list, $cb) {
  $result: null;
  @each $item in $list {
    $result: call($cb, $item);
  }

  @return $result;
}





// (f, 34, '<>')

// (
//  (f, 24, 36)
//  (f, '<>', 36)
//  (f, 353, '<>')
// )

// (f, 34, '<2>')
// (if, (
//   (f, 2, '<1>')
//   (f, 2, '<1>')
// ), (
//   (f, '<2>')
//   (f, '<2>')
// ),(
//   (f, '<2>') 
//   (f, '<2>') 
// ))
// (f, 34, '<>')

// @function invoker($list) {
//   @each $item in $list { 

//   }


// }

@function invoke($args...) {
  $cb: get-function('invoke');

  $result: null;
  @each $item in args-to-list($args) { 
    $result: if(
      is-function-list($item),
      invoke-fn-list($item, $cb),
      if(
        is-list-of-function-lists($item),
        invoke-list-of-fn-lists($item, $cb),
        throw('invoke() expects function-list or list of function-lists, #{type-of($item)} - provided')
      )
    );
  }

  @return $result;
}


@function pipe($args...) {
  $result: null;
  @each $arg in $args {
    $list: list.append($list, $arg);
  }

  @return $list;
}


@function return-or-invoke($value) {
  @return if(is-function-list($value) or is-function($value), invoke($value), $value);
}


@function if-else($cond, $then, $else) {
  @return if(return-or-invoke($cond), return-or-invoke($then), return-or-invoke($else));
}


@function debug($value) {
  @debug $value;
  @return $value;
}


@function join($a, $b) {
  @return list.join($a, $b);
}

@function exists($value) {
  @return $value != null;
}
@function to-list($str) {
  @return list.append((), $str);
}

@function has($str, $sub) {
  @return string.index($str, $sub);
}

@function decrement($num) {
  @return $num - 1;
}

@function increment($num) {
  @return $num + 1;
}

@function is-empty-string($value) {
  @return $value == '';
}


@function split-with-sep($str, $sep) {
  // @return if(
  //   has($str, $sep),
  //   join(
  //     pipe(
  //       f('str-index', $str, $sep), 
  //       f('if', f('is-empty-string', $sep), null, f('decrement', '<>')),
  //       f('str-slice', $str, 1, '<>'),
  //       f('to-list', '<>'),
  //     ),
  //     pipe(
  //       f('str-index', $str, $sep),
  //       f('increment', '<>'),
  //       f('str-slice', $str, '<>'),
  //       f('split-with-sep', '<>', $sep)
  //     )
  //   ),
  //   to-list($str)
  // );

  // channels
  // call-or-return - убрать

  @return invoke(
    f('if',
      f('has', $str, $sep),
      f('join', 
        (
          f('str-index', $str, $sep), 
          f('if', f('is-empty-string', $sep), null, f('decrement', '<>')),
          f('str-slice', $str, 1, '<>'),
          f('to-list', '<>'),
        ),
        (
          f('str-index', $str, $sep),
          f('increment', '<>'),
          f('str-slice', $str, '<>'),
          f('split-with-sep', '<>', $sep)
        )
      ),
      f('to-list', $str)
    )
  );
}

@function split($str, $sep: null) {
  @return invoke(
    f('if', 
      f('exists', $sep), 
      f('split-with-sep', $str, $sep), 
      f('to-list', $str)
    )
  );
}

@function add($a, $b) {
  @return $a + $b;
}

@debug split('fuck you', ' ');


@function check-type($value, $expected, $message) {
  @if type-of($expected) != 'string' { @error 'type must be string in check-type(), #{type-of($expected)} - provided'; }
  @if type-of($message) != 'string' { @error 'message must be string in check-type(), #{type-of($message)} - provided'; }

  // $expected: pipe(
  //   get-function('index', $module: 'string') $expected '|',
  //   get-function('if') '<>' 
  // );

  $actual: type-of($value);
  $separator: string.index($expected, '|');
  $type-placeholder: string.index($message, '%t');

  @if $type-placeholder {
    $message: string.slice($message, 1, $type-placeholder - 1) + 
              $actual + 
              string.slice($message, $type-placeholder + 2);
  }

  @if $separator {
    $expected1: string.slice($expected, 1, $separator - 1);
    $expected2: string.slice($expected, $separator + 1);

    @if $actual != $expected1 and $actual != $expected2 { @error $message; }
  } @else {
    @if $actual != $expected { @error $message; }
  }

  @return $value;
}


@function switch($cond, $cases) {
  @if type-of($cases) != 'map' {
    @error 'cases must be map in switch(), #{type-of($cases)} - provided';
  }

  $default: map.get($cases, 'default');
  @if not $default {
    @error 'cases must have default prop in switch()';
  }

  @each $case, $value in $cases {
    @if $cond == $case {
      @return if(type-of($value) == 'function', call($value), $value);
    }
  }

  @return if(type-of($default) == 'function', call($default), $default);
}



