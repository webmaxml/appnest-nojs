@use 'sass:meta';
@use 'sass:string';
@use 'sass:list';
@use 'sass:map';

@function f($name, $args...) { @return list.join(get-function($name), $args); }


@function throw($message) {
  @error $message;
}

@function is-function($value) {
  @return type-of($value) == 'function';
}

@function is-function-list($value) {
  @return type-of($value) == 'list' and type-of(list.nth($value, 1)) == 'function';
}

@function is-list-of-function-lists($value) {
  @return type-of($value) == 'list' and is-function-list(list.nth($value, 1));
}

@function replace-placeholder($list, $value) {
  $processed: ();
  @each $item in $list {
    @if type-of($item) == list {
      $item: replace-placeholder($item, $value);
    }

    $processed: list.append($processed, if($item == '<>', $value, $item)); 
  }

  @return $processed;
}


@function invoke($list, $replacer: null) {
  @if is-function-list($list) {
    $fn: list.nth($list, 1);

    $processed: ();
    @if $fn == get-function('if') {
      $cond: list.nth($list, 2);
      $processed: if(
        is-function-list($cond) or is-list-of-function-lists($cond),
        list.set-nth($list, 2, invoke($cond)),
        $list
      );
    } @else {
      @each $arg in $list {
        $arg: if(
          is-function-list($arg) or is-list-of-function-lists($arg),
          invoke($arg),
          $arg
        );

        $processed: list.append($processed, $arg);
      }
    }

    @debug $processed;

    $result: call($processed...);
    @return if(
      is-function-list($result) or is-list-of-function-lists($result),
      invoke($result),
      $result
    );

  } @else if is-list-of-function-lists($list) {
    $result: 113;
    @each $item in $list {
      @if $item {
        $result: invoke(replace-placeholder($item, $result));
      }   
    }

    @return $result;
  } @else {
    @error 'invoke() expects function-list or list of function-lists, #{type-of($list)} - provided';
  }
}


@function pipe($args...) {
  $list: ();
  @each $arg in $args {
    $list: list.append($list, $arg);
  }

  @return $list;
}


@function return-or-invoke($value) {
  @return if(is-function-list($value) or is-function($value), invoke($value), $value);
}


@function if-else($cond, $then, $else) {
  @return if(return-or-invoke($cond), return-or-invoke($then), return-or-invoke($else));
}


@function debug($value) {
  @debug $value;
  @return $value;
}


@function join($a, $b) {
  @return list.join($a, $b);
}

@function exists($value) {
  @return $value != null;
}
@function to-list($str) {
  @return list.append((), $str);
}

@function has($str, $sub) {
  @return string.index($str, $sub);
}

@function decrement($num) {
  @return $num - 1;
}

@function increment($num) {
  @return $num + 1;
}

@function is-empty-string($value) {
  @return $value == '';
}


@function split-with-sep($str, $sep) {
  // @return if(
  //   has($str, $sep),
  //   join(
  //     pipe(
  //       f('str-index', $str, $sep), 
  //       f('if', f('is-empty-string', $sep), null, f('decrement', '<>')),
  //       f('str-slice', $str, 1, '<>'),
  //       f('to-list', '<>'),
  //     ),
  //     pipe(
  //       f('str-index', $str, $sep),
  //       f('increment', '<>'),
  //       f('str-slice', $str, '<>'),
  //       f('split-with-sep', '<>', $sep)
  //     )
  //   ),
  //   to-list($str)
  // );

  @return invoke(pipe(
    f('if',
      f('has', $str, $sep),
      f('join', 
        pipe(
          f('str-index', $str, $sep), 
          f('if', f('is-empty-string', $sep), null, f('decrement', '<>')),
          f('str-slice', $str, 1, '<>'),
          f('to-list', '<>'),
        ),
        pipe(
          f('str-index', $str, $sep),
          f('increment', '<>'),
          f('str-slice', $str, '<>'),
          f('split-with-sep', '<>', $sep)
        )
      ),
      f('to-list', $str)
    )
  ));
}

@function split($str, $sep: null) {
  @return invoke(pipe(
    f('if', 
      f('exists', $sep), 
      f('split-with-sep', $str, $sep), 
      f('to-list', $str)
    )
  ));
}

@function add($a, $b) {
  @return $a + $b;
}

@debug split('fuck you', ' ');


@function check-type($value, $expected, $message) {
  @if type-of($expected) != 'string' { @error 'type must be string in check-type(), #{type-of($expected)} - provided'; }
  @if type-of($message) != 'string' { @error 'message must be string in check-type(), #{type-of($message)} - provided'; }

  // $expected: pipe(
  //   get-function('index', $module: 'string') $expected '|',
  //   get-function('if') '<>' 
  // );

  $actual: type-of($value);
  $separator: string.index($expected, '|');
  $type-placeholder: string.index($message, '%t');

  @if $type-placeholder {
    $message: string.slice($message, 1, $type-placeholder - 1) + 
              $actual + 
              string.slice($message, $type-placeholder + 2);
  }

  @if $separator {
    $expected1: string.slice($expected, 1, $separator - 1);
    $expected2: string.slice($expected, $separator + 1);

    @if $actual != $expected1 and $actual != $expected2 { @error $message; }
  } @else {
    @if $actual != $expected { @error $message; }
  }

  @return $value;
}


@function switch($cond, $cases) {
  @if type-of($cases) != 'map' {
    @error 'cases must be map in switch(), #{type-of($cases)} - provided';
  }

  $default: map.get($cases, 'default');
  @if not $default {
    @error 'cases must have default prop in switch()';
  }

  @each $case, $value in $cases {
    @if $cond == $case {
      @return if(type-of($value) == 'function', call($value), $value);
    }
  }

  @return if(type-of($default) == 'function', call($default), $default);
}



