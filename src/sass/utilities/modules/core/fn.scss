@use 'Function';
@use 'Placeholder';
@use 'ports';

@function arglist-to-list($arglist) {
  @if type-of($arglist) != 'arglist' { @error 'arglist-to-list() expects argslist, #{type-of($arglist)} - provided'; }

  $list: ();
  @each $item in $arglist {
    $list: append($list, $item);
  }

  @return $list;
}

@function get-module-name($str) {
  @if type-of($str) != 'string' { @error 'get-module-name() expects string, #{type-of($str)} - provided'; }

  $sep-i: str-index($str, '.');
  @return if($sep-i, str-slice($str, 1, $sep-i - 1), null);
}

@function get-function-name($str) {
  @if type-of($str) != 'string' { @error 'get-function-name() expects string, #{type-of($str)} - provided'; }

  $module-sep-i: str-index($str, '.');
  $port-sep-i: str-index($str, ':');

  $start: if($module-sep-i, $module-sep-i + 1, 1);
  $end: if($port-sep-i, $port-sep-i - 1, -1);
  
  @return str-slice($str, $start, $end);
}

@function get-port-name($str) {
  @if type-of($str) != 'string' { @error 'get-port-name() expects string, #{type-of($str)} - provided'; }

  $sep-i: str-index($str, ':');
  @return if($sep-i, str-slice($str, $sep-i + 1), 'default');
}

@function create-fn($args...) {
  @return Function.create($args...);
}

@function p($name: 'default') {
  @return Placeholder.create($name);
}

@function c($fns...) {
  $ports: ports.reset();
  $result: Function.invoke-fn-list(arglist-to-list($fns));
  $ports: ports.reset();
  @return $result;
}

// to copy in each file, cause get-function() sees only functions where they declared 

@function f($str, $args...) {
  $module: get-module-name($str);
  $fn: get-function-name($str);
  $port: get-port-name($str);
  $args: arglist-to-list($args);

  $fn-exists: if(
    $module,
    map-has-key(meta.module-functions($module), $fn),
    function-exists($fn)
  );

  @if not $fn-exists { @error 'No such function: "#{$fn}"'; }
  
  @return create-fn(get-function($fn, $module: $module), $port, $args);
}


