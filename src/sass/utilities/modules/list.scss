@use 'sass:map';
@use 'types' as *;

// ----------------------------------------- private -----------------------------------------

/**
 * Gets the opposite list element 
 *
 * @param {*} elem
 * @param {number} i
 * @param {list} list
 *
 * @returns {*} element from opposite index
 */

@function _get-opposite($elem, $i, $list) {
  @return nth($list, length($list) - $i + 1);
}

/**
* whether map value is not equal to a provided element 
*
* @param {*} value
* @param {*} key
* @param {map} map
* @param {*} elem - element to compare
*
* @returns {bool}
*/

@function _not-equal($value, $key, $map, $elem) { @return $value != $elem; }


// ----------------------------------------- public -----------------------------------------


/**
* merges two maps into new map 
*
* @param {map} map1
* @param {map} map2
*
* @returns {map}
*/

@function deep-merge($map1, $map2) { @return map.deep-merge($map1, $map2); }

/**
* removes key from map 
*
* @param {map} map
* @param {*} key
* @param {...*} keys - keys for nested maps 
*
* @returns {map}
*/

@function deep-remove($map, $key, $keys...) { @return map.deep-remove($map, $key, $keys...); }

/**
* sets new key-value pair 
*
* @param {map} map
* @param {*} key
* @param {*} value
*
* @returns {map}
*/

@function set($map, $key, $value) { @return map.set($map, $key, $value); }

/**
* gets list of map keys 
*
* @param {map} map
*
* @returns {list}
*/

@function keys($map) { @return map.keys($map); }

/**
* gets list of map values 
*
* @param {map} map
*
* @returns {list}
*/

@function values($map) { @return map.values($map); }

/**
* gets first value 
*
* @param {list|map} list
*
* @returns {*}
*/

@function first($list) {
  $list: validate($list, 'list', 'map');

  @if is($list, 'list') { @return nth($list, 1); }
  @if is($list, 'map') { @return nth(nth($list, 1), 2); }
}

/**
* gets last value 
*
* @param {list|map} list
*
* @returns {*}
*/

@function last($list) {
  $list: validate($list, 'list', 'map');

  @if is($list, 'list') { @return nth($list, -1); }
  @if is($list, 'map') { @return nth(nth($list, -1), 2); }
}

/**
* whether the value is last 
*
* @param {list|map} list
* @param {*} value
*
* @returns {bool}
*/

@function is-last($list, $value) {
  $list: validate($list, 'list', 'map');
  @return last($list) == $value;
}

/**
* gets next value 
*
* @param {list|map} list
* @param {*} value
*
* @returns {*}
*/

@function next-value($list, $value) {
  $list: validate($list, 'list', 'map');
  $values: if(is($list, 'list'), $list, values($list));
  $i: index($values, $value);

  @if not $i { @error "No such value '#{inspect($value)}' in list"; }
  @if $i == length($values) { @error "Value '#{inspect($value)}' is the last one in list"; }

  @if is($list, 'list') { @return nth($list, $i + 1); }
  @if is($list, 'map') { @return nth(nth($list, $i + 1), 2); }
}

/**
* gets next map key 
*
* @param {map} map
* @param {*} key
*
* @returns {*}
*/

@function next-key($map, $key) {
  $map: validate($map, 'map');
  $keys: keys($map);
  $i: index($keys, $key);

  @if not $i { @error "No such key '#{inspect($key)}' in map"; }
  @if $i == length($keys) { @error "Key '#{inspect($key)}' is the last one in map"; }

  @return nth(nth($map, $i + 1), 1);
}

/**
* converts to list 
*
* @param {*} value
*
* @returns {list}
*/

@function to-list($value) {
  $list: ();
  @if is($value, 'arglist') { @each $arg in $value { $list: append($list, $arg); } }
  @else if is($value, 'list') { $list: $value; }
  @else { $list: append($list, $value); }

  @return $list;
}

/**
* gets new list|map from callback results 
*
* @param {list|map} list
* @param {function} cb - (value, i|key, list|map, ...args): newValue
* @param {bool} [deep=false] - invoke callback on nested lists|maps
* @param {...*} args - some additional args for callback 
*
* @returns {list|map}
*/

@function map($list, $cb, $deep: false, $args...) {
  $list: validate($list, 'list', 'map');
  $cb: validate($cb, 'function');

  $result: ();

  @if is($list, 'list') {
    @each $item in $list {
      $result: if(
        $deep and is($item, 'list', 'map'),
        append($result, map($item, $cb, $deep, $args...)),
        append($result, call($cb, $item, index($list, $item), $list, $args...))
      );
    }
  }

  @if is($list, 'map') {
    @each $key, $value in $list {
      $result: if(
        $deep and is($value, 'list', 'map'),
        map.set($result, $key, map($value, $cb, $deep, $args...)),
        map.set($result, $key, call($cb, $value, $key, $list, $args...))
      );
    }
  }

  @return $result;
}

/**
* invokes callback for each element
*
* @param {list|map} list
* @param {function} cb - (value, i|key, list|map, ...args): whatever
* @param {bool} [deep=false] - invoke callback on nested lists|maps
* @param {...*} args - some additional args for callback 
*
* @returns {*} last callback return, just to return something
*/

@function for-each($list, $cb, $deep: false, $args...) {
  $list: validate($list, 'list', 'map');
  $cb: validate($cb, 'function');

  $result: null;

  @if is($list, 'list') {
    @each $item in $list {
      $result: if(
        $deep and is($item, 'list', 'map'),
        for-each($item, $cb, $deep, $args...),
        call($cb, $item, index($list, $item), $list, $args...)
      );
    }
  }

  @if is($list, 'map') {
    @each $key, $value in $list {
      $result: if(
        $deep and is($value, 'list', 'map'),
        for-each($value, $cb, $deep, $args...),
        call($cb, $value, $key, $list, $args...)
      );
    }
  }

  @return $result;
}

/**
* reduces list to a certain value
*
* @param {list} list
* @param {function} cb - (accum, value, i, list, ...args): newAccum
* @param {*} [init=null] - initial accum, if not provided - equals to first list element
* @param {...*} args - some additional args for callback
*
* @returns {*} accumulated value
*/

@function reduce($list, $cb, $init: null, $args...) {
  $list: validate($list, 'list');
  $cb: validate($cb, 'function');

  $result: if($init, $init, nth($list, 1));
  @each $item in $list {
    $i: index($list, $item);
    @if if($init, true, $i != 1) {
      $result: call($cb, $result, $item, index($list, $item), $list, $args...);
    }
  }

  @return $result;
}

/**
* filters list|map
*
* @param {list|map} list
* @param {function} cb - (value, i|key, list|map, ...args): bool
* @param {bool} [deep=false] - invoke callback on nested lists|maps
* @param {...*} args - some additional args for callback
*
* @returns {list|map}
*/

@function filter($list, $cb, $deep: false, $args...) {
  $list: validate($list, 'list', 'map');
  $cb: validate($cb, 'function');

  $result: ();

  @if is($list, 'list') {
    @each $item in $list {
      $item: if($deep and is($item, 'list', 'map'), filter($item, $cb, $deep, $args...), $item);
      $passed: if($deep and is($item, 'list', 'map'), true, call($cb, $item, index($list, $item), $list, $args...));

      @if $passed { $result: append($result, $item); }  
    }
  }

  @if is($list, 'map') {
    @each $key, $value in $list {
      $value: if($deep and is($value, 'list', 'map'), filter($value, $cb, $deep, $args...), $value);
      $passed: if($deep and is($value, 'list', 'map'), true, call($cb, $value, $key, $list, $args...));

      @if $passed { $result: map.set($result, $key, $value); }  
    }
  }

  @return $result;
}

/**
* removes the value from list|map if it is there
*
* @param {list|map} list
* @param {*} value
*
* @returns {list|map}
*/

@function remove($list, $value) {
  $list: validate($list, 'list', 'map');
  @return filter($list, get-function('_not-equal'), false, $value);
}

/**
* constructs map with new keys 
*
* @param {map} map
* @param {function} cb - (key, value, map, ...args): newKey
* @param {...*} args - some additional args for callback
*
* @returns {map}
*/

@function map-keys($map, $cb, $args...) {
  $map: validate($map, 'map');
  $cb: validate($cb, 'function');

  $result: ();
  @each $key, $value in $map {
    $result: map.set($result, call($cb, $key, $value, $map, $args...), $value);
  }

  @return $result;
}

/**
* constructs map with new key-value pairs
*
* @param {map} map
* @param {function} cb - (key, value, map, ...args): (newKey: newValue)
* @param {...*} args - some additional args for callback
*
* @returns {map}
*/

@function map-to-map($map, $cb, $args...) {
  $map: validate($map, 'map');
  $cb: validate($cb, 'function');

  $result: ();
  @each $key, $value in $map {
    $result: map-merge($result, call($cb, $value, $key, $map, $args...));
  }

  @return $result;
}

/**
* constructs list from map
*
* @param {map} map
* @param {function} cb - (value, key, map, ...args): newValue
* @param {...*} args - some additional args for callback
*
* @returns {list}
*/

@function map-to-list($map, $cb, $args...) {
  $map: validate($map, 'map');
  $cb: validate($cb, 'function');

  $result: ();
  @each $key, $value in $map {
    $result: append($result, call($cb, $value, $key, $map, $args...));
  }

  @return $result;
}

/**
* constructs map from list
*
* @param {list} list
* @param {function} cb - (value, i, list, ...args): (key: value)
* @param {...*} args - some additional args for callback
*
* @returns {map}
*/

@function list-to-map($list, $cb, $args...) {
  $list: validate($list, 'list');
  $cb: validate($cb, 'function');

  $result: ();
  @each $elem in $list {
    $result: map-merge($result, call($cb, $elem, index($list, $elem), $list, $args...));
  }

  @return $result;
}

/**
* reverses list 
*
* @param {list} list
*
* @returns {list}
*/

@function reverse($list) {
  $list: validate($list, 'list');
  @return map($list, get-function('_get-opposite'));
}

/**
* joins list to string 
*
* @param {list} list
* @param {string} [sep='']
*
* @returns {string}
*/

@function join-to-str($list, $sep: '') {
  $list: validate($list, 'list');
  $sep: validate($sep, 'string');
  $first: nth($list, 1);

  @return if(length($list) == 1, #{$first}, #{$first} + $sep + join-to-str(remove($list, $first), $sep));
}