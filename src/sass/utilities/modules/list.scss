@use 'sass:list';
@use 'sass:map';
@use 'type' as *;

@function append($list, $val, $separator: auto) { @return list.append($list, $val, $separator); }
@function index($list, $value) { @return list.index($list, $value); }
@function is-bracketed($list) { @return list.is-bracketed($list); }
@function join($list1, $list2, $separator: auto, $bracketed: auto) { @return list.join($list1, $list2, $separator, $bracketed); }
@function length($list) { @return list.length($list); }
@function separator($list) { @return list.separator($list); }
@function nth($list, $n) { @return list.nth($list, $n); }
@function set-nth($list, $n, $value) { @return list.set-nth($list, $n, $value); }
@function zip($lists...) { @return list.zip($lists...); }

@function deep-merge($map1, $map2) { @return map.deep-merge($map1, $map2); }
@function get($map, $key, $keys...) { @return map.get($map, $key, $keys...); }
@function has-key($map, $key, $keys...) { @return map.has-key($map, $key, $keys...); }
@function keys($map) { @return map.keys($map); }
@function merge($map1, $map2) { @return map.merge($map1, $map2); }
@function set($map, $key, $value) { @return map.set($map, $key, $value); }
@function values($map) { @return map.values($map); }

@function to-list($value) {
  @if is($value, 'arglist') {
    $result: ();
    @each $arg in $value {
      $result: append($result, $arg);
    }

    @return $result;
  }

  @if is($value, 'list|map') { @return $value; }

  @return append((), $value);
}

@function map($list, $cb, $deep: false) {
  $cb: validate($cb, 'function');
  $list: validate($list, 'list|map');

  @if is($list, 'list') {
    $result: ();
    @each $item in $list {
      $item: if($deep and is($item, 'list|map'), map($item, $cb, $deep), $item);
      $result: append($result, call($cb, $item, index($list, $item), $list));
    }

    @return $result;
  }

  @if is($list, 'map') {
    $result: ();
    @each $key, $value in $list {
      $value: if($deep and is($item, 'list|map'), map($value, $cb, $deep), $value);
      $result: map.set($result, $key, call($cb, $value, $key, $list));
    }

    @return $result;
  }
}

@function for-each($list, $cb, $deep: false) {
  $cb: validate($cb, 'function');
  $list: validate($list, 'list|map');

  @if is($list, 'list') {
    $result: null;
    @each $item in $list {
      $item: if($deep and is($item, 'list|map'), for-each($item, $cb, $deep), $item);
      $result: call($cb, $item, index($list, $item), $list);
    }

    @return $result;
  }

  @if is($list, 'map') {
    $result: null;
    @each $key, $value in $list {
      $value: if($deep and is($item, 'list|map'), for-each($value, $cb, $deep), $value);
      $result: call($cb, $value, $key, $list);
    }

    @return $result;
  }
}

@function reduce($list, $cb, $init: null) {
  $list: validate($list, 'list');
  $cb: validate($list, 'function');

  $result: if($init, $init, nth($list, 1));
  @each $item in $list {
    $i: index($list, $item);
    @if if($init, true, $i != 1) {
      $result: call($cb, $result, $item, index($list, $item), $list);
    }
  }

  @return $result;
}

@function filter($list, $cb, $deep: false) {
  $cb: validate($cb, 'function');
  $list: validate($list, 'list|map');

  @if is($list, 'list') {
    $result: ();
    @each $item in $list {
      $item: if($deep and is($item, 'list|map'), filter($item, $cb, $deep), $item);
      $passed: call($cb, $item, index($list, $item), $list);

      @if $passed { $result: append($result, $item); }  
    }

    @return $result;
  }

  @if is($list, 'map') {
    $result: ();
    @each $key, $value in $list {
      $value: if($deep and is($item, 'list|map'), filter($value, $cb, $deep), $value);
      $passed: call($cb, $value, $key, $list);

      @if $passed { $result: map.set($result, $key, $value); }  
    }

    @return $result;
  }
}

@function is-last($list, $elem) {
  $list: validate($list, 'list|map');

  @if is($list, 'list') { @return nth($list, -1) == $elem; }
  @if is($list, 'map') { @return nth(nth($list, -1), 1) == $elem; }
}

@function remove($list, $elem, $keys...) {
  $list: validate($list, 'list|map');

  @if is($list, 'list') {
    @if index($list, $elem) {
      $result: ();
      @each $item in $list {
        @if $item != $elem {
          $result: append($result, $item);
        }
      }

      @return $result;
    } @else {
      @return $list;
    }
  }
  
  @if is($list, 'map') {
    @return map.deep-remove($list, $elem, $keys...);
  } 
}

@function map-keys($map, $cb, $deep: false) {
  $map: validate($map, 'map');
  $cb: validate($cb, 'function');

  $result: ();
  @each $key, $value in $map {
    $value: if($deep and is($value, 'map'), map-keys($value, $cb, $deep), $value);
    $result: map.set($result, call($cb, $key, $value, $map), $value);
  }

  @return $result;
}