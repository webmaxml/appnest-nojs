@use 'sass:meta';
@use 'sass:list';
@use 'sass:map';

@function append($list, $val, $separator: auto) { @return list.append($list, $val, $separator); }
@function index($list, $value) { @return list.index($list, $value); }
@function is-bracketed($list) { @return list.is-bracketed($list); }
@function join($list1, $list2, $separator: auto, $bracketed: auto) { @return list.join($list1, $list2, $separator, $bracketed); }
@function length($list) { @return list.length($list); }
@function separator($list) { @return list.separator($list); }
@function nth($list, $n) { @return list.nth($list, $n); }
@function set-nth($list, $n, $value) { @return list.set-nth($list, $n, $value); }
@function zip($lists...) { @return list.zip($lists...); }

@function deep-merge($map1, $map2) { @return map.deep-merge($map1, $map2); }
@function get($map, $key, $keys...) { @return map.get($map, $key, $keys...); }
@function has-key($map, $key, $keys...) { @return map.has-key($map, $key, $keys...); }
@function keys($map) { @return map.keys($map); }
@function merge($map1, $map2) { @return map.merge($map1, $map2); }
@function set($map, $key, $value) { @return map.set($map, $key, $value); }
@function values($map) { @return map.values($map); }


@function is-list($value) {
  @return meta.type-of($value) == list;
}

@function is-map($value) {
  @return meta.type-of($value) == map;
}

@function is-empty-list($value) {
  @if is-list($value) and length($value) == 0 {
    @return true;
  } @else {
    @return false;
  }
}

@function is-last-elem($list, $elem) {
  @if is-list($list) {
    @return nth($list, -1) == $elem;
  } @else if is-map($list) {
    @return nth(nth($list, -1), 1) == $elem;
  } @else {
    @error "$list in is-last-elem() must be 'list' or 'map', '#{meta.type-of($list)}' - provided";
  }
}

@function remove($list, $elem, $keys...) {
  @if is-list($list) {
    @if index($list, $elem) {
      $result: ();
      @each $item in $list {
        @if $item != $elem {
          $result: append($result, $item);
        }
      }

      @return $result;
    } @else {
      @return list;
    }
  } @else if is-map($list) {
    @return map.deep-remove($list, $elem, $keys...);
  } @else {
    @error "$list in remove() must be 'list' of 'map', '#{meta.type-of($list)}' - provided";
  }
}

@function map($list, $cb, $deep: false) {
  $list-type: meta.type-of($list);
  $cb-type: meta.type-of($cb);

  @if $cb-type != function {
    @error "callback in for-each() must be function, #{$cb-type} - provided";
  }

  @if $list-type == list {
    $sep: list.separator($list);
    $result: ();
    @each $item in $list {
      $item-type: meta.type-of($item);
      
      @if $deep and $item-type == list or $item-type == map {
        $item: map($item, $cb);
      } @else {
        $i: list.index($list, $item);
        $item: meta.call($cb, $item, $i, $list);
      }

      $result: list.append($result, $item, $sep);
    }

    @return $result;
  } @else if $list-type == map {
      $result: ();
      @each $key, $value in $list {
        $value-type: meta.type-of($value);

        @if $deep and $value-type == list or $value-type == map {
          $value: map($value, $cb);
        } @else {
          $value: meta.call($cb, $value, $key, $list);
        }

        $result: map.set($result, $key, $value);
      }
      
      @return $result;
  } @else {
    @error "map() expects list or map, #{$list-type} - provided";
  }
}

@function map-keys($map, $cb) {
  $map-type: meta.type-of($map);
  $cb-type: meta.type-of($cb);

  @if $map-type != map {
    @error "map in map-keys() must be map, #{$map-type} - provided";
  }
  @if $cb-type != function {
    @error "callback in for-each() must be function, #{$cb-type} - provided";
  }

  $result: ();
  @each $key, $value in $map {
    $key-type: meta.type-of($key);
    $value-type: meta.type-of($value);

    @if $key-type == list or $key-type == map {
      $key: map-keys($key, $cb);
    } @else {
      $key: meta.call($cb, $key, $value, $map);
    }

    @if $value-type == map {
      $value: map-keys($value, $cb);
    } 

    $result: map.set($result, $key, $value);
  }
  
  @return $result;
}