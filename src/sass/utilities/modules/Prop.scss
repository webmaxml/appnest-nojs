@use 'obj';
@use 'type' as *;
@use 'Breakpoints';
@use 'list';
@use 'number';

@function _is-fluid($value) { @return is($value, 'list') and list.first($value) == 'fluid'; } 
@function _is-breakpoints($value) { @return is($value, 'map'); }
@function _is-value-with-breakpoints($value) {  @return is($value, 'list') and is(list.last($value), 'map') and not _is-fluid($value); }

@function _get-prop($this) { @return obj.get($this, 'prop'); }
@function _get-value($this) { @return obj.get($this, 'value'); }
@function _get-breakpoints($this) { 
  $bps: obj.get($this, 'breakpoints');
  @return if($bps, obj.call($bps, 'get-breakpoints'), null); 
}

@function create($prop, $value) {
  $prop: validate($prop, 'string');
  $val: $value;
  $bps: null;

  @if _is-fluid($value) { 
    $val: number.to-px(list.first(list.last($value)));
    $bps: Breakpoints.create(list.last($value), true); 
  }

  @if _is-breakpoints($value) {
    $val: null;
    $bps: Breakpoints.create($value); 
  }

  @if _is-value-with-breakpoints($value) { 
    $val: list.remove($value, list.last($value));
    $bps: Breakpoints.create(list.last($value)); 
  }

  @return obj.create-class('Prop', (
    'prop': $prop,
    'value': $val,
    'breakpoints': $bps,
    'get-prop': get-function('_get-prop'),
    'get-value': get-function('_get-value'),
    'get-breakpoints': get-function('_get-breakpoints')
  ));
}
