@use 'sass:meta';
@use 'sass:map';
@use '../core/obj';
@use '../core/fn' as *;
@use '../core/helpers' as *;

@function f($str, $args...) {
  $module: get-module-name($str);
  $fn: get-function-name($str);
  $port: get-port-name($str);
  $args: arglist-to-list($args);

  $fn-exists: if(
    $module,
    map-has-key(meta.module-functions($module), $fn),
    function-exists($fn)
  );

  @if not $fn-exists { @error 'No such function: "#{$fn}"'; }
  
  @return create-fn(get-function($fn, $module: $module), $port, $args);
}

// ----------------------------------------- functions -----------------------------------------


@function add($a, $b, $args...) {
  @if type-of($a) != 'number' { @error "add() expects numbers, #{type-of($a)} - provided"; };
  @if type-of($b) != 'number' { @error "add() expects numbers, #{type-of($b)} - provided"; };

  @return $a + $b;
}

@function subtract($a, $b, $args...) {
  @if type-of($a) != 'number' { @error "subtract() expects numbers, #{type-of($a)} - provided"; };
  @if type-of($b) != 'number' { @error "subtract() expects numbers, #{type-of($b)} - provided"; };

  @return $a - $b;
}

@function multiply($a, $b, $args...) {
  @if type-of($a) != 'number' { @error "multiply() expects numbers, #{type-of($a)} - provided"; };
  @if type-of($b) != 'number' { @error "multiply() expects numbers, #{type-of($b)} - provided"; };

  @return $a * $b;
}

@function divise($a, $b, $args...) {
  @if type-of($a) != 'number' { @error "divise() expects numbers, #{type-of($a)} - provided"; };
  @if type-of($b) != 'number' { @error "divise() expects numbers, #{type-of($b)} - provided"; };

  @return $a / $b;
}

@function increment($a, $args...) { 
  @if type-of($a) != 'number' { @error "increment() expects number, #{type-of($a)} - provided"; };
  @return add($a, 1); 
}
@function decrement($a, $args...) { 
  @if type-of($a) != 'number' { @error "decrement() expects number, #{type-of($a)} - provided"; };
  @return subtract($a, 1); 
}

@function equals($a, $b) { @return $a == $b; }

@function throw($message) { @error $message; }


@function _check-type($value, $type, $name) {
  @return if(
    type-of($value) != $type, 
    throw("#{$name} expects '#{$type}', '#{type-of($value)}' is given"),
    $value
  );
}

@function _check-instance($obj, $class, $name) {
  @return if(
    obj.instance-of($obj) != $class,
    throw("#{$name} expects instance of '#{$class}', '#{obj.instance-of($obj)}' is given"),
    $obj
  );
}


@function check($value, $type, $name) {
  @return c(
    f('if',
      f('obj.is-obj', $value),
      f('_check-instance', $value, $type, $name),
      f('_check-type', $value, $type, $name),
    )
  );
}


@function split-with-sep($str, $sep) {
  @return c(
    f('if',
      f('has', $str, $sep),
      f('join', 
        (
          f('str-index', $str, $sep), 
          f('if', f('is-empty-string|1', $sep), null, f('decrement', '<>')),
          f('str-slice', $str, 1, '<>'),
          f('to-list', '<>'),
        ),
        (
          f('str-index', $str, $sep),
          f('increment', '<>'),
          f('str-slice', $str, '<>'),
          f('split-with-sep', '<>', $sep)
        )
      ),
      f('to-list', $str)
    )
  );
}

@function split($str, $sep: null) {
  @return c(
    f('if', 
      f('exists', $sep), 
      f('split-with-sep', $str, $sep), 
      f('to-list', $str)
    )
  );
}


