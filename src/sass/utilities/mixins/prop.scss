@use 'sass:meta';
@use 'sass:list';
@use '../functions/is-string' as *;
@use '../functions/is-list' as *;
@use '../functions/is-map' as *;
@use '../functions/strip-unit' as *;
@use '../functions/to-px' as *;

@mixin prop($prop, $val, $breakpoints: ()) {
  @if not is-string($prop) {
    @error "$prop in prop() must be 'string', '#{meta.type-of($prop)}' - provided";
  }
  @if not is-map($breakpoints) and not is-list($breakpoints) {
    @error "$breakpoints in prop() must be 'map', '#{meta.type-of($breakpoints)}' - provided";
  }

  @if $val == "fluid" {
    // first and last breakpoints
    $first-bp: list.nth($breakpoints, 1);
    $last-bp: list.nth($breakpoints, -1);
    $last-i: list.index($breakpoints, $last-bp);

    // set first value for prop
    $first-value: to-px(list.nth($first-bp, 2));
    #{$prop}: $first-value;

    // for every breakpoint except last form fluid value
    @each $bp in $breakpoints {
      $current-i: list.index($breakpoints, $bp);

      @if $current-i != $last-i {
        $next-bp: list.nth($breakpoints, $current-i + 1);

        $vw1: to-px(list.nth($bp, 1));
        $vw2: to-px(list.nth($next-bp, 1));
        $value1: to-px(list.nth($bp, 2));
        $value2: to-px(list.nth($next-bp, 2));

        @media screen and (min-width: $vw1) {
          #{$prop}: calc(
            #{$value1} + #{strip-unit($value2 - $value1)} * ((100vw - #{$vw1}) / #{strip-unit($vw2 - $vw1)})
          );
        }
      }
    }

    // set last value for prop
    $last-vw: to-px(list.nth($last-bp, 1));
    $last-value: to-px(list.nth($last-bp, 2));

    @media screen and (min-width: $last-vw) {
      #{$prop}: $last-value;
    }
  } @else {
    #{$prop}: $val;

    @each $vw, $value in $breakpoints {
      @media screen and (min-width: to-px($vw)) {
        #{$prop}: $value;
      }
    }
  }
}