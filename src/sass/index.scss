// @use 'reset';
// @use 'assets';

// @use '../mixins/vars' as *;
// @use 'utilities/vars' as *;

// :root { @include vars($css); }

// @use 'common';
// @use 'blocks';
// @use 'sections';
// @use 'pages';

@use 'utilities/modules/obj';
@use 'utilities/modules/fn';
@use 'utilities/modules/placeholder';
@use 'utilities/modules/return';
@use 'sass:string';
@use 'sass:meta';

@function pl($name: 'default') {
  @return placeholder.create($name);
}

@function f($str, $args...) {
  $module: fn.get-module-name($str);
  $fn: fn.get-function-name($str);
  $port: fn.get-port-name($str);
  $args: fn.arglist-to-list($args);

  $fn-exists: if(
    $module,
    map-has-key(meta.module-functions($module), $fn),
    function-exists($fn)
  );

  @if not $fn-exists { @error 'No such function: "#{$fn}"'; }
  
  @return fn.create(get-function($fn, $module: $module), $port, $args);
}

@function invoke($fns...) {
  $return: return.create(); 
  @each $fn in $fns {
    $return: obj.call($fn, 'invoke', $return);
  }

  @return obj.call($return, 'get-last');
}


@function add($a, $b) {
  @return $a + $b;
}


@debug invoke(
  f('add', 1, 1),
  f('add:some', 3, 3),
  f('add:ass', 10, 10),
  f('add', pl(), 10)
);